openapi: "3.0.3"

info:
  title: "StockGPT API"
  description: |-
    StockGPT API from Rails API.
  version: "1.0.0"

servers:
  - url: https://api.example.com/api/v1
    description: production
  - url: https://{environment}.api.example.com/api/v1
    variables:
      environment:
        default: dev
        enum:
          - dev
          - staging
    description: develop
  - url: "{protocol}://{host}:{port}/api/v1"
    description: local
    variables:
      protocol:
        enum:
          - http
          - https
        default: http
      host:
        default: localhost
      port:
        enum:
          - '443'
          - '8443'
        default: '443'

tags:
  - name: User
    description: Access to user model.

paths:
  /users:
    post:
      tags:
      - "User"
      summary: CreateUser
      operationId: createUser
      requestBody:
        $ref: '#/components/requestBodies/CreateUserRequestBody'
      responses:
        '200':
          description: 作成済みユーザー
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserModel'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '403':
          $ref: '#/components/responses/ForbiddenResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
                
  
    get:
      tags:
      - "User"
      summary: ユーザ一覧取得
      description: ユーザー一覧
      operationId: getUserList
      responses:
        '200':
          $ref: '#/components/responses/GetUsersResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '403':
          $ref: '#/components/responses/ForbiddenResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
          
  /users/{id}:
    parameters:
      - $ref: '#/components/parameters/UserIdParameter'
    get:
      tags:
        - "User"
      summary: GetUserById
      description: |-
        Get user by id.
      responses:
        '200':
          $ref: '#/components/responses/GetUserResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '403':
          $ref: '#/components/responses/ForbiddenResponse'
        '404':
          $ref: '#/components/responses/NotFoundResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
          
    patch:
      tags:
        - "User"
      summary: UpdateUserById
      description: |-
        Update user by id.
      parameters:
        - $ref: '#/components/parameters/UserIdParameter'
      requestBody:
        $ref: '#/components/requestBodies/UpdateUserRequestBody'
      responses:
        '200':
          $ref: '#/components/responses/UpdateUserResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '403':
          $ref: '#/components/responses/ForbiddenResponse'
        '404':
          $ref: '#/components/responses/NotFoundResponse'
        '409':
          $ref: '#/components/responses/ConflictErrorResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
  
    delete:
      tags:
        - "User"
      summary: DeleteUserById
      description: |-
        Delete user by id.
      parameters:
        - $ref: '#/components/parameters/UserIdParameter'
      responses:
        '200':
          $ref: '#/components/responses/GetUserResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '403':
          $ref: '#/components/responses/ForbiddenResponse'
        '404':
          $ref: '#/components/responses/NotFoundResponse'
        '409':
          $ref: '#/components/responses/ConflictErrorResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
          
  /users/{id}/edit:
    parameters:
      - $ref: '#/components/parameters/UserIdParameter'
    get:
      tags:
        - "User"
      summary: EditUserById
      parameters:
        - $ref: '#/components/parameters/UserIdParameter'
      responses:
        '200':
          $ref: '#/components/responses/GetUserResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '403':
          $ref: '#/components/responses/ForbiddenResponse'
        '404':
          $ref: '#/components/responses/NotFoundResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
    
components:
  schemas:
  #-------------------------------
  # User schema
  #-------------------------------  
    UserDynamicProps:
      type: object
      properties:
        item_id:
          type: integer
          format: int64
          description: item id
          example: 2
        updated_at:
          type: string
          format: int64
          description: updated datetime
          example: 2023-01-21T17:32:28Z
        deleted_at:
          type: string
          format: int64
          description: deleted datetime
          example: null
          
    
    UserStaticProps:
      type: object
      properties:
        id:
          type: integer
          format: int64
          description: user id
          example: 2
        group_id:
          type: integer
          format: int64
          description: user id
          example: 2
        created_at:
          type: string
          format: int64
          description: created datetime
          example: 2023-01-21T17:32:28Z
          
    UserStaticPropsTwo:
      type: object
      properties:
        id:
          type: integer
          format: int64
          description: user id
          example: 3
        group_id:
          type: integer
          format: int64
          description: user id
          example: 3
        created_at:
          type: string
          format: int64
          description: created datetime
          example: 2023-01-21T17:32:28Z
          
    RequestBuyFlagOption:
      type: object
      properties:
        buy_flag:
          type: boolean
          example: false
          
    UserModel:
      type: object
      description: User
      allOf:
        - $ref: '#/components/schemas/UserDynamicProps'
        - $ref: '#/components/schemas/UserStaticProps'
        - $ref: '#/components/schemas/RequestBuyFlagOption'
        
    UserModelTwo:
      type: object
      description: User
      allOf:
        - $ref: '#/components/schemas/UserDynamicProps'
        - $ref: '#/components/schemas/UserStaticPropsTwo'
        - $ref: '#/components/schemas/RequestBuyFlagOption'
      properties:
        user_id:
          type: integer
          format: int64
          description: user id
          example: 2
        request_type:
          type: string
          format: int64
          description: category of product
          example: category_products
        request_name:
          type: string
          format: int64
          description: request name
          example: toilet
        updated_at:
          type: string
          format: int64
          description: updated datetime
          example: 2023-03-23T11:12:11Z
        buy_flag:
          type: boolean
          example: true
          
    UserModels:
      type: object
      properties:
        users:
          type: array
          items:
            oneOf:
            - type: object
              $ref: '#/components/schemas/UserModel'
            - type: object
              $ref: '#/components/schemas/UserModelTwo'
              
    
    ErrorModel:
      description: Response Error Model.
      required:
        - code
        - message
      type: object
      properties:
        code:
          title: error code
          type: string
          example: 500
        message:
          title: error message
          type: string
          example: Internal Server Error.
                
  #-------------------------------
  # Reusable operation parameters
  #-------------------------------
  parameters:
    UserIdParameter:
      name: id
      in: path
      description: User id.
      required: true
      schema:
        type: integer
      example: 2
    
  #-------------------------------
  # Reusable request body
  #-------------------------------  
  requestBodies:
    CreateUserRequestBody:
      description: user data
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/UserModel'
            
    UpdateUserRequestBody:
      description: user data
      required: true
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/schemas/UserModel'
              - properties:
                  user_id:
                    type: integer
                    format: int64
                    description: user id
                    example: 4
                  request_type:
                    type: string
                    format: int64
                    description: edit category of product
                    example: edit category_products
                  request_name:
                    type: string
                    format: int64
                    description: edit request name
                    example: edit toilet
                  updated_at:
                    type: string
                    format: int64
                    description: updated datetime
                    example: 2023-04-24T14:34:44Z
                      
    


  #-------------------------------
  # Reusable responses
  #-------------------------------
  responses:
    GetUsersResponse:
        description: User lists
        content:
          application/json:
            schema:
              allOf:
              - required:
                - users
              - type: object
              - properties:
                  users:
                    type: array
                    items:
                      oneOf:
                      - type: object
                        $ref: '#/components/schemas/UserModel'
                      - type: object
                        $ref: '#/components/schemas/UserModelTwo'
    
    GetUserResponse:
      description: Got user.
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/schemas/UserModel'
              
    UpdateUserResponse:
      description: Updated user.
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/schemas/UserModel'
              - properties:
                  email:
                    type: string
                    format: int64
                    description: mail address
                    example: testedited@gmail.com
                  encrypted_password:
                    type: string
                    format: int64
                    description: password
                    example: passwordedited
                  updated_at:
                    type: string
                    format: int64
                    description: updated datetime
                    example: 2023-03-21T17:32:28Z

    
    BadRequestResponse:
      description: | 
        Bad Request.
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/schemas/ErrorModel'
            properties:
              code:
                example: 400
              message:
                example: Bad Request.
                
    UnauthorizedResponse:
      description: | 
        Unauthorized.
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/schemas/ErrorModel'
            properties:
              code:
                example: 401
              message:
                example: Unauthorized.
                
    ForbiddenResponse:
      description: | 
        Forbidden.
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/schemas/ErrorModel'
            properties:
              code:
                example: 403
              message:
                example: Forbidden.
                
    NotFoundResponse:
      description: | 
        Not Found.
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/schemas/ErrorModel'
            properties:
              code:
                example: 404
              message:
                example: Not Found.
                
    ConflictErrorResponse:
      description: | 
        Conflict.
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/schemas/ErrorModel'
            properties:
              code:
                example: 409
              message:
                example: Conflict.
    InternalServerErrorResponse:
      description: |-
        Internal Server Error.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorModel'
          
          
          