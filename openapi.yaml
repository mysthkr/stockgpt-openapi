openapi: "3.0.3"

info:
  title: "StockGPT API"
  description: |-
    StockGPT API from Rails API.
  version: "1.0.0"

servers:
  - url: https://api.example.com/api/v1
    description: production
  - url: https://{environment}.api.example.com/api/v1
    variables:
      environment:
        default: dev
        enum:
          - dev
          - staging
    description: develop
  - url: "{protocol}://{host}:{port}/api/v1"
    description: local
    variables:
      protocol:
        enum:
          - http
          - https
        default: http
      host:
        default: localhost
      port:
        enum:
          - '443'
          - '8443'
        default: '443'

tags:
  - name: User
    description: Access to user model.
  - name: Profile
    description: Access to profile model.
    
  - name: Item
    description: Access to item model.

paths:
  /users:
    post:
      tags:
      - "User"
      summary: CreateUser
      operationId: createUser
      requestBody:
        $ref: '#/components/requestBodies/CreateUserRequestBody'
      responses:
        '200':
          description: 作成済みユーザー
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserModel'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '403':
          $ref: '#/components/responses/ForbiddenResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
                
  
    get:
      tags:
      - "User"
      summary: ユーザ一覧取得
      description: ユーザー一覧
      operationId: getUserList
      responses:
        '200':
          $ref: '#/components/responses/GetUsersResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '403':
          $ref: '#/components/responses/ForbiddenResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
          
  /users/{id}:
    parameters:
      - $ref: '#/components/parameters/UserIdParameter'
    get:
      tags:
        - "User"
      summary: GetUserById
      description: |-
        Get user by id.
      responses:
        '200':
          $ref: '#/components/responses/GetUserResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '403':
          $ref: '#/components/responses/ForbiddenResponse'
        '404':
          $ref: '#/components/responses/NotFoundResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
          
    patch:
      tags:
        - "User"
      summary: UpdateUserById
      description: |-
        Update user by id.
      parameters:
        - $ref: '#/components/parameters/UserIdParameter'
      requestBody:
        $ref: '#/components/requestBodies/UpdateUserRequestBody'
      responses:
        '200':
          $ref: '#/components/responses/UpdateUserResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '403':
          $ref: '#/components/responses/ForbiddenResponse'
        '404':
          $ref: '#/components/responses/NotFoundResponse'
        '409':
          $ref: '#/components/responses/ConflictErrorResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
  
    delete:
      tags:
        - "User"
      summary: DeleteUserById
      description: |-
        Delete user by id.
      parameters:
        - $ref: '#/components/parameters/UserIdParameter'
      responses:
        '200':
          $ref: '#/components/responses/GetUserResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '403':
          $ref: '#/components/responses/ForbiddenResponse'
        '404':
          $ref: '#/components/responses/NotFoundResponse'
        '409':
          $ref: '#/components/responses/ConflictErrorResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
          
  /users/{id}/edit:
    parameters:
      - $ref: '#/components/parameters/UserIdParameter'
    get:
      tags:
        - "User"
      summary: EditUserById
      parameters:
        - $ref: '#/components/parameters/UserIdParameter'
      responses:
        '200':
          $ref: '#/components/responses/GetUserResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '403':
          $ref: '#/components/responses/ForbiddenResponse'
        '404':
          $ref: '#/components/responses/NotFoundResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
  
  /profiles:
    post:
      tags:
      - "Profile"
      summary: CreateProfile
      operationId: createProfile
      requestBody:
        $ref: '#/components/requestBodies/CreateProfileRequestBody'
      responses:
        '200':
          description: 作成済みプロファイル
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProfileModel'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '403':
          $ref: '#/components/responses/ForbiddenResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
                
  
    get:
      tags:
      - "Profile"
      summary: プロファイル一覧取得
      description: プロファイル一覧
      operationId: getProfileList
      responses:
        '200':
          $ref: '#/components/responses/GetProfilesResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '403':
          $ref: '#/components/responses/ForbiddenResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
          
  /profiles/{id}:
    parameters:
      - $ref: '#/components/parameters/ProfileIdParameter'
    get:
      tags:
        - "Profile"
      summary: GetProfileById
      description: |-
        Get profile by id.
      responses:
        '200':
          $ref: '#/components/responses/GetProfileResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '403':
          $ref: '#/components/responses/ForbiddenResponse'
        '404':
          $ref: '#/components/responses/NotFoundResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
          
    patch:
      tags:
        - "Profile"
      summary: UpdateProfileById
      description: |-
        Update profile by id.
      parameters:
        - $ref: '#/components/parameters/ProfileIdParameter'
      requestBody:
        $ref: '#/components/requestBodies/UpdateProfileRequestBody'
      responses:
        '200':
          $ref: '#/components/responses/UpdateProfileResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '403':
          $ref: '#/components/responses/ForbiddenResponse'
        '404':
          $ref: '#/components/responses/NotFoundResponse'
        '409':
          $ref: '#/components/responses/ConflictErrorResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
  
    delete:
      tags:
        - "Profile"
      summary: DeleteProfileById
      description: |-
        Delete profile by id.
      parameters:
        - $ref: '#/components/parameters/ProfileIdParameter'
      responses:
        '200':
          $ref: '#/components/responses/GetProfileResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '403':
          $ref: '#/components/responses/ForbiddenResponse'
        '404':
          $ref: '#/components/responses/NotFoundResponse'
        '409':
          $ref: '#/components/responses/ConflictErrorResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
          
  /profiles/{id}/edit:
    parameters:
      - $ref: '#/components/parameters/ProfileIdParameter'
    get:
      tags:
        - "Profile"
      summary: EditProfileById
      parameters:
        - $ref: '#/components/parameters/ProfileIdParameter'
      responses:
        '200':
          $ref: '#/components/responses/GetProfileResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '403':
          $ref: '#/components/responses/ForbiddenResponse'
        '404':
          $ref: '#/components/responses/NotFoundResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
  
  
  /items:
    post:
      tags:
      - "Item"
      summary: CreateItem
      operationId: createItem
      requestBody:
        $ref: '#/components/requestBodies/CreateItemRequestBody'
      responses:
        '200':
          description: 作成済み商品
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ItemModel'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '403':
          $ref: '#/components/responses/ForbiddenResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
                
  
    get:
      tags:
      - "Item"
      summary: 商品一覧取得
      description: 商品一覧
      operationId: getItemList
      responses:
        '200':
          $ref: '#/components/responses/GetItemsResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '403':
          $ref: '#/components/responses/ForbiddenResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
          
  /items/{id}:
    parameters:
      - $ref: '#/components/parameters/ItemIdParameter'
    get:
      tags:
        - "Item"
      summary: GetItemById
      description: |-
        Get item by id.
      responses:
        '200':
          $ref: '#/components/responses/GetItemResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '403':
          $ref: '#/components/responses/ForbiddenResponse'
        '404':
          $ref: '#/components/responses/NotFoundResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
          
    patch:
      tags:
        - "Item"
      summary: UpdateItemById
      description: |-
        Update item by id.
      parameters:
        - $ref: '#/components/parameters/ItemIdParameter'
      requestBody:
        $ref: '#/components/requestBodies/UpdateItemRequestBody'
      responses:
        '200':
          $ref: '#/components/responses/UpdateItemResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '403':
          $ref: '#/components/responses/ForbiddenResponse'
        '404':
          $ref: '#/components/responses/NotFoundResponse'
        '409':
          $ref: '#/components/responses/ConflictErrorResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
  
    delete:
      tags:
        - "Item"
      summary: DeleteItemById
      description: |-
        Delete item by id.
      parameters:
        - $ref: '#/components/parameters/ItemIdParameter'
      responses:
        '200':
          $ref: '#/components/responses/GetItemResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '403':
          $ref: '#/components/responses/ForbiddenResponse'
        '404':
          $ref: '#/components/responses/NotFoundResponse'
        '409':
          $ref: '#/components/responses/ConflictErrorResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
          
  /items/{id}/edit:
    parameters:
      - $ref: '#/components/parameters/ItemIdParameter'
    get:
      tags:
        - "Item"
      summary: EditItemById
      parameters:
        - $ref: '#/components/parameters/ItemIdParameter'
      responses:
        '200':
          $ref: '#/components/responses/GetItemResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '403':
          $ref: '#/components/responses/ForbiddenResponse'
        '404':
          $ref: '#/components/responses/NotFoundResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'


components:
  schemas:
  #-------------------------------
  # User schema
  #-------------------------------  
    UserDynamicProps:
      type: object
      allOf:
        - $ref: '#/components/schemas/UpdateTimestamp'
      properties:
        email:
          type: string
          format: int64
          description: mail address
          example: test@gmail.com
        encrypted_password:
          type: string
          format: int64
          description: password
          example: password
          
    
    UserStaticProps:
      type: object
      allOf:
        - $ref: '#/components/schemas/CreateTimestamp'
      properties:
        id:
          type: integer
          format: int64
          description: user id
          example: 2
        group_id:
          type: integer
          format: int64
          description: group id
          example: 2
          
    UserStaticPropsTwo:
      type: object
      allOf:
        - $ref: '#/components/schemas/SecondCreateTimestamp'
      properties:
        id:
          type: integer
          format: int64
          description: user id
          example: 3
        group_id:
          type: integer
          format: int64
          description: group id
          example: 3
          
    UserAdminOption:
      type: object
      properties:
        admin:
          type: boolean
          example: true
          
    UserBusinessOption:
      type: object
      properties:
        business:
          type: boolean
          example: false
          
    UserModel:
      type: object
      description: User
      allOf:
        - $ref: '#/components/schemas/UserDynamicProps'
        - $ref: '#/components/schemas/UserStaticProps'
        - $ref: '#/components/schemas/UserAdminOption'
        - $ref: '#/components/schemas/UserBusinessOption'
        
    UserModelTwo:
      type: object
      description: User
      allOf:
        - $ref: '#/components/schemas/UserDynamicProps'
        - $ref: '#/components/schemas/UserStaticPropsTwo'
        - $ref: '#/components/schemas/UserAdminOption'
        - $ref: '#/components/schemas/UserBusinessOption'
        - $ref: '#/components/schemas/SecondUpdateTimestamp'
      properties:
        email:
          type: string
          format: int64
          description: mail address
          example: test2@gmail.com
        encrypted_password:
          type: string
          format: int64
          description: password
          example: password2
        admin:
          type: boolean
          example: false
              
    
    ErrorModel:
      description: Response Error Model.
      required:
        - code
        - message
      type: object
      properties:
        code:
          title: error code
          type: string
          example: 500
        message:
          title: error message
          type: string
          example: Internal Server Error.
          
  #-------------------------------
  # Profile schema
  #-------------------------------  
    ProfileDynamicProps:
      type: object
      allOf:
        - $ref: '#/components/schemas/UpdateTimestamp'
      properties:
        name:
          type: string
          format: int64
          description: name
          example: testname
        nickname:
          type: string
          format: int64
          description: nickname
          example: test nicky
        roommante_number:
          type: integer
          format: int64
          description: roommante number
          example: 2
        prefecture:
          type: string
          format: int64
          description: prefecture
          example: 北海道

    ProfileStaticProps:
      type: object
      allOf:
        - $ref: '#/components/schemas/CreateTimestamp'
      properties:
        id:
          type: integer
          format: int64
          description: profile id
          example: 2
        user_id:
          type: integer
          format: int64
          description: user id
          example: 2
          
    ProfileStaticPropsTwo:
      type: object
      allOf:
        - $ref: '#/components/schemas/SecondCreateTimestamp'
      properties:
        id:
          type: integer
          format: int64
          description: profile id
          example: 3
        user_id:
          type: integer
          format: int64
          description: user id
          example: 3
          
    ProfileModel:
      type: object
      description: Profile
      allOf:
        - $ref: '#/components/schemas/ProfileDynamicProps'
        - $ref: '#/components/schemas/ProfileStaticProps'
        
    ProfileModelTwo:
      type: object
      description: Profile
      allOf:
        - $ref: '#/components/schemas/ProfileDynamicProps'
        - $ref: '#/components/schemas/ProfileStaticPropsTwo'
        - $ref: '#/components/schemas/SecondUpdateTimestamp'
      properties:
        name:
          type: string
          format: int64
          description: name
          example: testnametwo
        nickname:
          type: string
          format: int64
          description: nickname
          example: test nicky
        roommante_number:
          type: integer
          format: int64
          description: roommante number
          example: 3
        prefecture:
          type: string
          format: int64
          description: prefecture
          example: 沖縄県
          
                
  #-------------------------------
  # Item schema
  #-------------------------------  
    ItemDynamicProps:
      type: object
      allOf:
        - $ref: '#/components/schemas/UpdateTimestamp'
      properties:
        name:
          type: string
          format: int64
          description: category of product
          example: Egg
        criteria:
          type: integer
          format: int64
          description: item id
          example: 22
          
    
    ItemStaticProps:
      type: object
      allOf:
        - $ref: '#/components/schemas/CreateTimestamp'
      properties:
        id:
          type: integer
          format: int64
          description: item id
          example: 2
          
    ItemStaticPropsTwo:
      type: object
      allOf:
        - $ref: '#/components/schemas/SecondCreateTimestamp'
      properties:
        id:
          type: integer
          format: int64
          description: item id
          example: 3
          
    ItemModel:
      type: object
      description: Item
      allOf:
        - $ref: '#/components/schemas/ItemDynamicProps'
        - $ref: '#/components/schemas/ItemStaticProps'
        
    ItemModelTwo:
      type: object
      description: Item
      allOf:
        - $ref: '#/components/schemas/ItemDynamicProps'
        - $ref: '#/components/schemas/ItemStaticPropsTwo'
        - $ref: '#/components/schemas/SecondUpdateTimestamp'
      properties:
        name:
          type: string
          format: int64
          description: category of product
          example: Miso
        criteria:
          type: integer
          format: int64
          description: item id
          example: 333
              
    UpdateTimestamp:
      type: object
      properties:
        updated_at:
          type: string
          format: int64
          description: updated datetime
          example: 2023-02-22T22:22:22Z
          
    CreateTimestamp:
      type: object
      properties:
        updated_at:
          type: string
          format: int64
          description: updated datetime
          example: 2023-02-22T22:22:22Z
          
    EditUpdateTimestamp:
      type: object
      properties:
        updated_at:
          type: string
          format: int64
          description: updated datetime
          example: 2023-04-04T04:04:04Z
    
    SecondUpdateTimestamp:
      type: object
      properties:
        updated_at:
          type: string
          format: int64
          description: updated datetime
          example: 2023-03-03T03:03:03Z
    
    SecondCreateTimestamp:
      type: object
      properties:
        updated_at:
          type: string
          format: int64
          description: updated datetime
          example: 2023-03-03T03:03:03Z
    
                
  #-------------------------------
  # Reusable operation parameters
  #-------------------------------
  parameters:
    UserIdParameter:
        name: id
        in: path
        description: User id.
        required: true
        schema:
          type: integer
        example: 2
    ProfileIdParameter:
      name: id
      in: path
      description: Profile id.
      required: true
      schema:
        type: integer
      example: 2
        
    ItemIdParameter:
      name: id
      in: path
      description: Item id.
      required: true
      schema:
        type: integer
      example: 2
    
  #-------------------------------
  # Reusable request body
  #-------------------------------  
  requestBodies:
    CreateUserRequestBody:
      description: user data
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/UserModel'
            
    UpdateUserRequestBody:
      description: user data
      required: true
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/schemas/UserDynamicProps'
              - $ref: '#/components/schemas/EditUpdateTimestamp'
              - properties:
                  email:
                    type: string
                    format: int64
                    description: mail address
                    example: testedited@gmail.com
                  encrypted_password:
                    type: string
                    format: int64
                    description: password
                    example: passwordedited
    
    CreateProfileRequestBody:
      description: profile data
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ProfileModel'
            
    UpdateProfileRequestBody:
      description: profile data
      required: true
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/schemas/ProfileDynamicProps'
              - $ref: '#/components/schemas/EditUpdateTimestamp'
              - properties:
                  name:
                    type: string
                    format: int64
                    description: name
                    example: testnametwo
                  nickname:
                    type: string
                    format: int64
                    description: nickname
                    example: test nicky
                  roommante_number:
                    type: integer
                    format: int64
                    description: roommante number
                    example: 3
                  prefecture:
                    type: string
                    format: int64
                    description: prefecture
                    example: 沖縄県
                    
                    
                    
                    
  
    CreateItemRequestBody:
      description: item data
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ItemModel'
            
    UpdateItemRequestBody:
      description: item data
      required: true
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/schemas/ItemModel'
              - $ref: '#/components/schemas/EditUpdateTimestamp'
              - properties:
                  name:
                    type: string
                    format: int64
                    description: category of product
                    example: Beef
                  criteria:
                    type: integer
                    format: int64
                    description: item id
                    example: 4


  #-------------------------------
  # Reusable responses
  #-------------------------------
  responses:
    GetUsersResponse:
        description: User lists
        content:
          application/json:
            schema:
              allOf:
              - required:
                - users
              - type: object
              - properties:
                  users:
                    type: array
                    items:
                      oneOf:
                      - type: object
                        $ref: '#/components/schemas/UserModel'
                      - type: object
                        $ref: '#/components/schemas/UserModelTwo'
    GetUserResponse:
      description: Got user.
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/schemas/UserModel'
              
    UpdateUserResponse:
      description: Updated user.
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/schemas/UserModel'
              - $ref: '#/components/schemas/EditUpdateTimestamp'
              - properties:
                  email:
                    type: string
                    format: int64
                    description: mail address
                    example: testedited@gmail.com
                  encrypted_password:
                    type: string
                    format: int64
                    description: password
                    example: passwordedited
    
    
    GetProfilesResponse:
        description: Profile lists
        content:
          application/json:
            schema:
              allOf:
              - required:
                - profiles
              - type: object
              - properties:
                  profiles:
                    type: array
                    items:
                      oneOf:
                      - type: object
                        $ref: '#/components/schemas/ProfileModel'
                      - type: object
                        $ref: '#/components/schemas/ProfileModelTwo'
    
    GetProfileResponse:
      description: Got profile.
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/schemas/ProfileModel'
              
    UpdateProfileResponse:
      description: Updated profile.
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/schemas/ProfileModel'
              - $ref: '#/components/schemas/EditUpdateTimestamp'
              - properties:
                  name:
                    type: string
                    format: int64
                    description: name
                    example: testnametwo
                  nickname:
                    type: string
                    format: int64
                    description: nickname
                    example: test nicky
                  roommante_number:
                    type: integer
                    format: int64
                    description: roommante number
                    example: 3
                  prefecture:
                    type: string
                    format: int64
                    description: prefecture
                    example: 沖縄県
    
    
    
    
    
    
    
    
    
    GetItemsResponse:
        description: Item lists
        content:
          application/json:
            schema:
              allOf:
              - required:
                - items
              - type: object
              - properties:
                  items:
                    type: array
                    items:
                      oneOf:
                      - type: object
                        $ref: '#/components/schemas/ItemModel'
                      - type: object
                        $ref: '#/components/schemas/ItemModelTwo'
    
    GetItemResponse:
      description: Got item.
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/schemas/ItemModel'
              
    UpdateItemResponse:
      description: Updated item.
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/schemas/ItemModel'
              - $ref: '#/components/schemas/EditUpdateTimestamp'
              - properties:
                  name:
                    type: string
                    format: int64
                    description: category of product
                    example: Beef
                  criteria:
                    type: integer
                    format: int64
                    description: item id
                    example: 4

    
    BadRequestResponse:
      description: | 
        Bad Request.
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/schemas/ErrorModel'
            properties:
              code:
                example: 400
              message:
                example: Bad Request.
                
    UnauthorizedResponse:
      description: | 
        Unauthorized.
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/schemas/ErrorModel'
            properties:
              code:
                example: 401
              message:
                example: Unauthorized.
                
    ForbiddenResponse:
      description: | 
        Forbidden.
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/schemas/ErrorModel'
            properties:
              code:
                example: 403
              message:
                example: Forbidden.
                
    NotFoundResponse:
      description: | 
        Not Found.
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/schemas/ErrorModel'
            properties:
              code:
                example: 404
              message:
                example: Not Found.
                
    ConflictErrorResponse:
      description: | 
        Conflict.
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/schemas/ErrorModel'
            properties:
              code:
                example: 409
              message:
                example: Conflict.
    InternalServerErrorResponse:
      description: |-
        Internal Server Error.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorModel'
          
          
          